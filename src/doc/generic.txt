1. 泛型: 不会预先确定数据类型,而是在使用的时候才确定类型.

// 打印字符串
function print (val: string): string {
  return val
}


如果输入字符数组,那么返回字符数组;
我们可以使用 函数重载 的形式进行编写;也可以采用联合类型编写.

当然,我们可以使用 any 类型;但是 any 类型忽略了传入参数类型与返回类型一致性的问题.


函数重载

function print (val: string): string {
  return val
}
function print (val: string[]): string[] {
  return val
}

function print (val: any): any {
  return val
}

联合类型

function print (val: string | tsring[]): string | string[] {
  return val
}

2. 改写为 泛型

function print<T> (val: T): T {
  return val
}

调用泛型函数
确定类型为 string[]
print<string[]>(['2', '4', '8']) 

类型推断
print(['5', 'tyj'])


通过别名来定义泛型函数
type Print = <T>(val: T) => T
let myPrint: Print = print

通过接口来定义泛型(仅仅约束函数)
interface Print {
  <T>(val: T): T
}

通过接口来定义泛型(约束函数,以及接口成员),实现时必须指定类型
interface Print<T> {
  (val: T): T
}

let YouPrint: Print<number> = print 

指定默认类型
interface Print<T = string> {
  (val: T): T
}


3. 泛型类

通过泛型类来约束类的成员;但泛型类无法约束类的静态方法.

class Log<T> {
  constructor () {

  }
  run (val: T) {
    console.log(val)
    return val
  }
  // static swin (val: T) { return val } // 报错,泛型不能约束静态成员
}

// 不指定类型
let myLog = new Log()
myLog.run(123456)
myLog.run('aegr')
myLog.run({a: 1})

// 指定类型
let myLog1 = new Log<number>()
myLog1.run(76531)



4. 泛型约束
泛型继承某一接口,使得泛型有所限制(必须有某口上的成员,否则报错)

interface Length {
  length: number
}

function Obj<T extends Length>(val: T): T {
  console.log(val, val.length)
  return val
}

Obj([12,456])
Obj('htrs4g56')


5. 小结
- 使用泛型的好处
  - 函数与类可以轻松地支持多种类型,增强程序扩展
  - 不必写重载列表或定义联合类型的声明,增强代码可读性
  - 灵活控制类型之间的耶稣